openapi: 3.0.0
info:
  title: Antimony - Lab Topology Builder
  description: |-
    Bla bla some text
    Bla bla more text

  contact:
    email: antimony@ost.ch
  license:
    name: MIT
    url: https://opensource.org/license/mit
  version: 1.0.0
servers:
  - url: https://localhost.ch
tags:
  - name: lab
    description: A lab that is registered in the system.
  - name: topology
    description: A lab topology template that can be deployed or edited.
  - name: user
    description: The Antimony main actor. Editor or reader.
  - name: device
    description: A device that represents a node in a topology.
paths:
  /users/auth:
    post:
      tags:
        - user
      summary: Authenticate with user credentials.
      operationId: userAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: JWT for the authenticated user
          content:
            application/json:
              schema:
                type: string
                format: JWT
                example: eyJ0eXAiOiJKV1QiLCJhbGc...
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /devices:
    get:
      tags:
        - device
      summary: Get all available devices.
      operationId: getDevices
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceInfo'
      security:
        - antimony_auth: []
  /labs:
    get:
      tags:
        - lab
      summary: Get all registered labs.
      operationId: getLabs
      parameters:
        - name: page
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          headers:
            X-Page:
              schema:
                type: integer
              description: The current page index.
            X-Page-Count:
              schema:
                type: integer
              description: The amount of available pages.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/LabOut'
      security:
        - antimony_auth: []
    post:
      tags:
        - lab
      summary: Start a new lab.
      operationId: postLab
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabIn'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - antimony_auth: []
  /labs/{labId}:
    delete:
      tags:
        - lab
      summary: Cancels a registered lab.
      operationId: abortLab
      parameters:
        - name: labId
          in: path
          description: The ID of the lab to be cancelled.
          required: true
          schema:
            type: string
            format: uuid4
            example: 922c8ee5-c793-47e2-9b90-463afd7b4880
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - antimony_auth: []
  /groups:
    get:
      tags:
        - group
      summary: Get all groups.
      operationId: getGroups
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupOut'
      security:
        - antimony_auth: []
    post:
      tags:
        - group
      summary: Add a new group.
      operationId: postGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupIn'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - antimony_auth: []
  /groups/{groupId}:
    patch:
      tags:
        - group
      summary: Edit an existing group.
      operationId: putGroup
      parameters:
        - name: groupId
          in: path
          description: The ID of the group to edit.
          required: true
          schema:
            type: string
            format: uuid4
            example: 922c8ee5-c793-47e2-9b90-463afd7b4880
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupIn'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - antimony_auth: []
    delete:
      tags:
        - group
      summary: Delete an existing group.
      operationId: deleteGroup
      parameters:
        - name: groupId
          in: path
          description: The ID of the group to delete.
          required: true
          schema:
            type: string
            format: uuid4
            example: 922c8ee5-c793-47e2-9b90-463afd7b4880
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - antimony_auth: []
  /topologies:
    get:
      tags:
        - topology
      summary: Get all topologies.
      operationId: getTopologies
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/TopologyOut'
      security:
        - antimony_auth: []
    post:
      tags:
        - topology
      summary: Add a new topology.
      operationId: postTopology
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopologyIn'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - antimony_auth: []
  /topologies/{topologyId}:
    patch:
      tags:
        - topology
      summary: Edit an existing topology.
      operationId: putTopology
      parameters:
        - name: topologyId
          in: path
          description: The ID of the topology to edit.
          required: true
          schema:
            type: string
            format: uuid4
            example: 922c8ee5-c793-47e2-9b90-463afd7b4880
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopologyIn'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - antimony_auth: []
    delete:
      tags:
        - topology
      summary: Delete an existing topology.
      operationId: deleteTopology
      parameters:
        - name: topologyId
          in: path
          description: The ID of the topology to delete.
          required: true
          schema:
            type: string
            format: uuid4
            example: 922c8ee5-c793-47e2-9b90-463afd7b4880
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - antimony_auth: []
components:
  schemas:
    LabIn:
      type: object
      properties:
        name:
          type: string
          example: Lab1_John_Doe
        startDate:
          type: string
          format: iso-8601-datetime
          example: 2024-09-26T11:46:38Z
        endDate:
          type: string
          format: iso-8601-datetime
          example: 2024-09-28T11:46:38Z
        templateId:
          type: string
          format: uuid4
          example: 588bbd7d-ed61-4656-a539-2153acbd8154
    LabOut:
      type: object
      properties:
        id:
          type: string
          format: uuid4
          example: 94ec1976-2cef-486c-a1e2-30257a7a0392
        name:
          type: string
          example: Lab1_John_Doe
        startDate:
          type: string
          format: iso-8601-datetime
          example: 2024-09-26T11:46:38Z
        endDate:
          type: string
          format: iso-8601-datetime
          example: 2024-09-28T11:46:38Z
        groupId:
          type: string
          format: uuid4
          example: d781dda8-caaf-40d4-ab6a-eb602f1ffa45
        topologyId:
          type: string
          format: uuid4
          example: 588bbd7d-ed61-4656-a539-2153acbd8154
        nodeMeta:
          type: array
          items:
            $ref: '#/components/schemas/NodeMeta'
        edgesharkLink:
          type: string
          example: edgeshark.example.com/whatever
        runnerId:
          description: The ID of the user that owns the lab. Grants abort permissions.
          type: string
          format: uuid4
          example: 6308b71e-c496-46a2-8d00-ba7e513a4aa3
        latestStateChange:
          type: string
          format: iso-8601-datetime
          example: 2024-09-26T11:46:38Z
        state:
          type: string
          enum:
            - Scheduled
            - Deploying
            - Running
            - Failed
            - Done
    TopologyIn:
      type: object
      properties:
        name:
          type: string
          example: CN1_FS21
        definition:
          type: string
          format: yaml
          example: [...]
    TopologyOut:
      type: object
      properties:
        id:
          type: string
          format: uuid4
          example: ad20c79d-960d-418f-9ed1-88ff74c0073c
        definition:
          type: string
          format: yaml
          example: [...]
        groupId:
          type: string
          format: uuid4
          example: 58a1713e-8616-4223-a5f2-d29c8e7bb68b
        creatorId:
          description: The ID of the user that owns the topology. Grants edit / delete permissions.
          type: string
          format: uuid4
          example: 814475ec-be4b-4d29-a638-63ce718e543b
    GroupIn:
      type: object
      properties:
        name:
          type: string
          example: CldInf_HS24
        public:
          type: boolean
          example: true
    GroupOut:
      type: object
      properties:
        id:
          type: string
          format: uuid4
          example: 58a1713e-8616-4223-a5f2-d29c8e7bb68b
        name:
          type: string
          example: CldInf_HS24
        public:
          description: Whether users can create, edit and run topologies of this group.
          type: boolean
          example: true
    UserOut:
      type: object
      properties:
        uuid:
          type: string
          format: uuid4
          example: 6308b71e-c496-46a2-8d00-ba7e513a4aa3
        username:
          type: string
          example: JohnDoe69
        creation:
          type: string
          format: iso-8601-date
          example: 2024-02-12
    UserLogin:
      type: object
      properties:
        username:
          type: string
          example: JohnDoe69
        password:
          type: string
          example: pssword123
    DeviceInfo:
      type: object
      properties:
        name:
          type: string
          example: Nokia SR Linux
        fullName:
          type: string
          example: srl/nokia_srlinux
        type:
          type: string
          example: Router
          enum:
            - Router
            - Switch
            - Container
            - VirtualMachine
            - Generic
    NodeMeta:
      type: object
      properties:
        name:
          type: string
          example: srl/nokia_srlinux
        user:
          type: string
          example: ins
        host:
          type: string
          example: example.com
        port:
          type: integer
          example: 9003
        webSsh:
          type: string
          example: console.ltb3.network.garden/whatever/stuff
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          format: JWT
          example: eyJ0eXAiOiJKV1QiLCJhbGc...
        isAdmin:
          type: boolean
          example: false
    SuccessResponse:
      type: object
      properties:
        payload:
          type: object
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    antimony_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
